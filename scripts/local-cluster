#!/bin/bash

set -e

CLUSTER_HELP=$(
  cat <<-EOH
Initiates new cluster of ephemera nodes.

  usage:      $0 cluster [-n] <number of instances>

  options:
    -n        Number of instances to create
EOH
)

RUN_HELP=$(
  cat <<-EOH
Runs Ephemera cluster.

  usage:      $0 run [-a] [ephemera|nym-api]

  options:
    -a        Which application cluster should run
EOH
)

STOP_HELP=$(
  cat <<-EOH
Stops currently running cluster of ephemera nodes.

  usage:      $0 stop

EOH
)

SUBCMD=$1

[[ $SUBCMD == "init" || $SUBCMD == "run" || $SUBCMD == "stop" || $SUBCMD == "clean" || $SUBCMD == "delete" ]] ||
  { echo "Please specify a subcommand of \`init\` or \`run\` or \`stop\` or \`clean\` or \`delete\`" && exit 1; }

shift

[[ $SUBCMD == "init" ]] && [[ $# -lt 1 || $# -gt 2 ]] && echo "$CLUSTER_HELP" && exit 1

[[ $SUBCMD == "init" ]] && {
  while getopts :n opt; do
    case $opt in
    n)
      NR_OF_NODES="${2}"
      shift
      ;;
    h)
      echo "$CLUSTER_HELP"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "delete" ]] && {
  while getopts :h opt; do
    case $opt in
    h)
      echo "Deletes cluster configuration"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "clean" ]] && {
  while getopts :h opt; do
    case $opt in
    h)
      echo "Deletes cluster temporary files(databases and logs)"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "run" ]] && [[ $# -lt 1 || $# -gt 2 ]] && echo "$RUN_HELP" && exit 1

[[ $SUBCMD == "run" ]] && {
  while getopts :ha opt; do
    case $opt in
    a)
      APPLICATION="${2}"
      shift
      ;;
    h)
      echo "$RUN_HELP"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

EPHEMERA_HOME_DIR=$(eval echo ~"$USER")/.ephemera
PROJECT_ROOT=$(git rev-parse --show-toplevel)
CLUSTER_DIR="${PROJECT_ROOT}/cluster"
PIDS_FILE="${PROJECT_ROOT}/scripts"/.pids
EPHEMERA="$PROJECT_ROOT"/target/release/ephemera
NYM_API_EPHEMERA="$PROJECT_ROOT"/target/release/nym_api_ephemera
REWARD_CONTRACT="$PROJECT_ROOT"/target/release/reward_contract

export RUST_LOG="nym_api=debug,ephemera=debug,info"
export RUST_BACKTRACE=1

build() {
  echo "Building ephemera..."
  cargo build --release
}

create_cluster() {
  build

  echo "Creating configuration for ${NR_OF_NODES} nodes..."

  COUNTER=1
  for ((c = 1; c <= NR_OF_NODES; c++)); do
    NETWORK_CLIENT_LISTENER_ADDRESS=/ip4/127.0.0.1/tcp/400"$COUNTER"
    WS_ADDRESS=127.0.0.1:600"$COUNTER"
    HTTP_SERVER_ADDRESS=127.0.0.1:700"$COUNTER"

    NODE_DIR="$EPHEMERA_HOME_DIR"/node"$c"
    DB_PATH="$NODE_DIR"/db

    mkdir -p "$NODE_DIR"/nym-api/logs
    mkdir -p "$NODE_DIR"/nym-api/db
    mkdir -p "$NODE_DIR"/ephemera/logs
    mkdir -p "$NODE_DIR"/ephemera/db

    $EPHEMERA init \
            --node node"$c" \
            --port 300"$c" \
            --sqlite-path "$DB_PATH"/ephemera"$COUNTER".sqlite \
            --rocket-path "$DB_PATH"/ephemera"$COUNTER".db \
            --ws-address "$WS_ADDRESS" \
            --network-client-listener-address "$NETWORK_CLIENT_LISTENER_ADDRESS" \
            --http-server-address "$HTTP_SERVER_ADDRESS"

    COUNTER=$((COUNTER + 1))
  done
  $EPHEMERA add-local-peers --ephemera-root-dir ~/.ephemera

  status=$?
  [ $status -eq 0 ] && echo "Successfully created cluster" || echo "Creating cluster failed"

}

start_cluster() {
  if test -f "$PIDS_FILE"; then
    echo "Cluster is already running, try stopping it first by executing ./local-cluster stop."
    exit 1
  fi

  COUNTER=0
  for dir in ~/.ephemera/*/ephemera.toml; do
      if [[ $dir == *"node"* ]]; then
          COUNTER=$((COUNTER + 1))
      fi
  done

  [[ $COUNTER -lt 1 ]] && echo "No ephemera nodes found, try creating a cluster first." && exit 1

  build

  touch "$PIDS_FILE"

  if [[ $APPLICATION == "nym-api" ]]; then
      run_reward_contract
  fi

  sleep 2

  COUNTER=1
  for d in ~/.ephemera/*/ephemera.toml; do

    if [[ $APPLICATION == "nym-api" ]]; then
      run_nym_api_ephemera "$d" "$COUNTER" &
    else
      run_ephemera "$d" "$COUNTER" &
    fi

    COUNTER=$((COUNTER + 1))
  done

  echo "Started $((COUNTER - 1)) $APPLICATION instances."
  echo "Log files are in $EPHEMERA_HOME_DIR nodes subdirectories."
}

run_ephemera() {
  d=$1
  NR=$2

  NODE_DIR="$EPHEMERA_HOME_DIR"/node"$NR"
  LOGS_FILE=$NODE_DIR/ephemera/logs/ephemera$NR.log

  echo "Starting $d"
  $EPHEMERA run-node --config-file ~/.ephemera/node"${NR}"/ephemera.toml > "$LOGS_FILE" 2>&1 &

  echo "$!" >> "$PIDS_FILE"

  echo Log file: "$LOGS_FILE"
}

run_nym_api_ephemera() {
  d=$1
  NR=$2

  NODE_DIR="$EPHEMERA_HOME_DIR"/node"$NR"

  EPHEMERA_CONFIG_FILE=$NODE_DIR/ephemera.toml
  LOGS_FILE=$NODE_DIR/nym-api/logs/nym-api$NR.log
  METRICS_DB_PATH="$NODE_DIR"/nym-api/db/metrics"${NR}".sqlite

  touch "$LOGS_FILE"
  touch "$METRICS_DB_PATH"

  echo "Starting $d"
  $NYM_API_EPHEMERA --ephemera-config "$EPHEMERA_CONFIG_FILE" \
                    --metrics-db-path "$METRICS_DB_PATH" \
                    --smart-contract-url 127.0.0.1:6789 \
                    --nym-api-id "$NR" \
                    > "$LOGS_FILE" 2>&1 &

  echo "$!" >> "$PIDS_FILE"

  echo Log file: "$LOGS_FILE"
}

run_reward_contract() {
  REWARD_CONTRACT_DIR="$EPHEMERA_HOME_DIR"/reward_contract

  LOGS_FILE=$REWARD_CONTRACT_DIR/logs/reward_contract.log
  CONTRACT_DB_PATH="$REWARD_CONTRACT_DIR"/db/contract.sqlite
  SMART_CONTRACT_URL=127.0.0.1:6789

  mkdir -p "$REWARD_CONTRACT_DIR"/logs
  mkdir -p "$REWARD_CONTRACT_DIR"/db

  touch "$CONTRACT_DB_PATH"
  touch "$LOGS_FILE"

  echo "Starting reward contract"
  $REWARD_CONTRACT --db-path "$CONTRACT_DB_PATH" \
                   --url "$SMART_CONTRACT_URL" \
                    > "$LOGS_FILE" 2>&1 &

  echo "$!" >> "$PIDS_FILE"

  echo "Reward contract started"
  echo Log file: "$LOGS_FILE"
}

stop_cluster() {
  if test -f "$PIDS_FILE";
  then
     while read p; do
       kill "$p" || true
     done < "$PIDS_FILE"
     rm "$PIDS_FILE"
     echo "Stopped ephemera cluster"
  else
     echo "No ephemera cluster running"
  fi
}

clean() {
  if test -f "$PIDS_FILE"; then
    echo "Cluster is running, try stopping it first by executing ./local-cluster stop."
    exit 1
  fi
  echo "Cleaning cluster all directories and files except configuration."
  for d in ~/.ephemera/*/; do
    echo "Cleaning $d"
    rm -rf "$d"/nym-api/logs/*
    rm -rf "$d"/nym-api/db/*
    rm -rf "$d"/ephemera/logs/*
    rm -rf "$d"/ephemera/db/*
  done
}

delete(){
  if test -f "$PIDS_FILE"; then
    echo "Cluster is running, try stopping it first by executing ./local-cluster stop."
    exit 1
  fi
  echo "Deleting ephemera cluster configurations located at ~/.ephemera"
  rm -rf ~/.ephemera
}

[[ $SUBCMD == "init" ]] && create_cluster
[[ $SUBCMD == "run" ]] && start_cluster
[[ $SUBCMD == "stop" ]] && stop_cluster
[[ $SUBCMD == "clean" ]] && clean
[[ $SUBCMD == "delete" ]] && delete

