#!/bin/bash

set -e

CLUSTER_HELP=$(
  cat <<-EOH
Initiates new cluster of ephemera nodes.

  usage:      $0 cluster [-n] <number of instances>

  options:
    -n        Number of instances to create
EOH
)

RUN_HELP=$(
  cat <<-EOH
Runs Ephemera cluster.

  usage:      $0 run
EOH
)

RUN_NODE_HELP=$(
  cat <<-EOH
Starts a Ephemera node by its nr.

  usage:      $0 run -n <node nr>

  options:
    -n        Which node to run
EOH
)

STOP_CLUSTER_HELP=$(
  cat <<-EOH
Stops currently running cluster of ephemera nodes.

  usage:      $0 stop

EOH
)

STOP_NODE_HELP=$(
  cat <<-EOH
Stops a node by its nr.

  usage:      $0 stop -n <node nr>

  options:
      -n        Node number(as 1 in node1)

EOH
)

UPDATE_CONFIG_HELP=$(
  cat <<-EOH
Updates cluster nodes ephemera.toml configuration.
PS! Properties are typed, so you need to provide correct type of value.

  usage:      $0 -n all -k my.nested.property -v myvalue

  options:
      -n        Node id or "all" to update all nodes
      -k        Which property to update
      -v        New value for the property
EOH
)

SUBCMD=$1

[[ $SUBCMD == "init" ||
  $SUBCMD == "run" ||
  $SUBCMD == "run_node" ||
  $SUBCMD == "stop" ||
  $SUBCMD == "clear" ||
  $SUBCMD == "delete" ||
  $SUBCMD == "update_config" ||
  $SUBCMD == "stop_node" ]] ||
  {
    echo "Please specify a subcommand of:" &&
      echo "\`init\`" &&
      echo "\`run\`" &&
      echo "\`run_node\`" &&
      echo "\`stop\`" &&
      echo "\`clear\`" &&
      echo "\`delete\`" &&
      echo "\`update_config\`" &&
      echo "\`stop_node\`" && exit 1
  }

shift

[[ $SUBCMD == "init" ]] && [[ $# -lt 1 || $# -gt 2 ]] && echo "$CLUSTER_HELP" && exit 1

[[ $SUBCMD == "init" ]] && {
  while getopts :nh opt; do
    case $opt in
    n)
      NR_OF_NODES="${2}"
      shift
      ;;
    h)
      echo "$CLUSTER_HELP"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "stop" ]] && {
  while getopts :h opt; do
    case $opt in
    h)
      echo "$STOP_CLUSTER_HELP"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "stop_node" ]] && [[ $# -lt 1 || $# -gt 2 ]] && echo "$STOP_NODE_HELP" && exit 1

[[ $SUBCMD == "stop_node" ]] && {
  while getopts :n opt; do
    case $opt in
    n)
      NODE_NR="${2}"
      shift
      ;;
    h)
      echo "$STOP_NODE_HELP"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "delete" ]] && {
  while getopts :h opt; do
    case $opt in
    h)
      echo "Deletes cluster configuration"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "clear" ]] && {
  while getopts :h opt; do
    case $opt in
    h)
      echo "Deletes cluster temporary files(databases and logs)"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}
echo $#
[[ $SUBCMD == "update_config" ]] && [[ $# != 6 ]] && echo "$UPDATE_CONFIG_HELP" && exit 1

[[ $SUBCMD == "update_config" ]] && {
  while getopts :nkvh opt; do
    case $opt in
    k)
      PROPERTY_KEY="${3}"
      shift
      ;;
    v)
      PROPERTY_VALUE="${4}"
      shift
      ;;
    n)
      NODE_ID="${2}"
      shift
      ;;
    h)
      echo "$UPDATE_CONFIG_HELP"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "run" ]] && [[ $# -lt 1 || $# -gt 2 ]] && echo "$RUN_HELP" && exit 1

[[ $SUBCMD == "run" ]] && {
  while getopts :ha opt; do
    case $opt in
    a)
      APPLICATION="${2}"
      shift
      ;;
    h)
      echo "$RUN_HELP"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

[[ $SUBCMD == "run_node" ]] && [[ $# -ne 2 ]] && echo "$RUN_NODE_HELP" && exit 1

[[ $SUBCMD == "run_node" ]] && {
  while getopts :n opt; do
    case $opt in
    n)
      NODE_NR="${2}"
      shift
      ;;
    h)
      echo "$RUN_NODE_HELP"
      exit 0
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    esac
  done
}

PROJECT_ROOT=$(git rev-parse --show-toplevel)

#Configuration root
EPHEMERA_HOME_DIR=$(eval echo ~"$USER")/.ephemera

PIDS_FILE="${PROJECT_ROOT}/scripts"/.pids

#Executable paths
EPHEMERA="$PROJECT_ROOT"/target/release/ephemera
NYM_API_EPHEMERA="$PROJECT_ROOT"/target/release/nym_api_ephemera
REWARD_CONTRACT="$PROJECT_ROOT"/target/release/reward_contract

export RUST_LOG="nym_api=debug,ephemera=debug,info"
#export RUST_LOG="info"
export RUST_LOG_JSON="true"
#export RUST_BACKTRACE=1

build() {
  echo "Building ephemera..."
  cargo build --release --features "rocksdb_storage"
  #  cargo build --release --features "sqlite_storage" --no-default-features
}

create_cluster() {
  build

  echo "Creating configuration for ${NR_OF_NODES} nodes..."

  COUNTER=1
  WS_PORT=6000
  EPHEMERA_PORT=3000
  HTTP_API_PORT=7000
  for ((c = 1; c <= NR_OF_NODES; c++)); do
    $EPHEMERA init-config \
      --node-name node"$c" \
      --protocol-port $EPHEMERA_PORT \
      --websocket-port "$WS_PORT" \
      --http-api-port "$HTTP_API_PORT" \
      --members-provider-delay-sec 60 \
      --threshold "0.8" \

      NODE_DIR="$EPHEMERA_HOME_DIR"/node"$c"
      mkdir -p "$NODE_DIR"/logs

    COUNTER=$((COUNTER + 1))
    WS_PORT=$((WS_PORT + 1))
    HTTP_API_PORT=$((HTTP_API_PORT + 1))
    EPHEMERA_PORT=$((EPHEMERA_PORT + 1))
    NETWORK_PORT=$((NETWORK_PORT + 1))
  done
  $EPHEMERA init-local-peers-config

  status=$?
  [ $status -eq 0 ] && echo "Successfully created cluster" || echo "Creating cluster failed"

}

start_cluster() {
  if test -f "$PIDS_FILE"; then
    echo "Cluster is already running, try stopping it first by executing ./local-cluster stop."
    exit 1
  fi

  COUNTER=0
  for dir in ~/.ephemera/*/ephemera.toml; do
    if [[ $dir == *"node"* ]]; then
      COUNTER=$((COUNTER + 1))
    fi
  done

  [[ $COUNTER -lt 1 ]] && echo "No ephemera nodes found, try creating a cluster first." && exit 1

  build

  touch "$PIDS_FILE"

  if [[ $APPLICATION == "nym-api" ]]; then
    run_reward_contract
  fi

  sleep 2

  COUNTER=1
  for d in ~/.ephemera/*/ephemera.toml; do

    if [[ $APPLICATION == "nym-api" ]]; then
      run_nym_api_ephemera "$d" "$COUNTER" &
    else
      run_ephemera "$d" "$COUNTER" &
      sleep 2
    fi

    COUNTER=$((COUNTER + 1))
  done

  echo "Started $((COUNTER - 1)) $APPLICATION instances."
  echo "Log files are in $EPHEMERA_HOME_DIR nodes subdirectories."
}

run_node() {

  echo "Starting node $NODE_NR"
  if [[ $APPLICATION == "nym-api" ]]; then
    run_nym_api_ephemera "$EPHEMERA_HOME_DIR"/"$APPLICATION"/node"$NODE_NR"/ephemera.toml "$NODE_NR" &
  else
    run_ephemera "$EPHEMERA_HOME_DIR"/"$APPLICATION"/node"$NODE_NR"/ephemera.toml "$NODE_NR" &
  fi

}

run_ephemera() {
  d=$1
  NR=$2

  NODE_DIR="$EPHEMERA_HOME_DIR"/node"$NR"
  LOGS_FILE=$NODE_DIR/logs/ephemera.log

  echo "Starting $d"
  $EPHEMERA run-node \
  --config-file ~/.ephemera/node"${NR}"/ephemera.toml \
  --http-provider-url http://127.0.0.1:8000/peers \
  >"$LOGS_FILE" 2>&1 &

  echo "$NR":"$!" >>"$PIDS_FILE"

  echo Log file: "$LOGS_FILE"
}

run_nym_api_ephemera() {
  d=$1
  NR=$2

  NODE_DIR="$EPHEMERA_HOME_DIR"/node"$NR"

  EPHEMERA_CONFIG_FILE=$NODE_DIR/ephemera.toml
  LOGS_FILE=$NODE_DIR/logs/ephemera.log
  METRICS_DB_PATH="$NODE_DIR"/db/metrics"${NR}".sqlite

  touch "$LOGS_FILE"
  touch "$METRICS_DB_PATH"

  echo "Starting $d"
  $NYM_API_EPHEMERA \
    --ephemera-config "$EPHEMERA_CONFIG_FILE" \
    --config-members-provider \
    --metrics-db-path "$METRICS_DB_PATH" \
    --smart-contract-url 127.0.0.1:6789 \
    --nym-api-id "$NR" \
    >"$LOGS_FILE" 2>&1 &

  echo "$NR":"$!" >>"$PIDS_FILE"

  echo Log file: "$LOGS_FILE"
}

run_reward_contract() {
  REWARD_CONTRACT_DIR="$EPHEMERA_HOME_DIR"/reward_contract

  LOGS_FILE=$REWARD_CONTRACT_DIR/logs/reward_contract.log
  CONTRACT_DB_PATH="$REWARD_CONTRACT_DIR"/db/contract.sqlite
  SMART_CONTRACT_URL=127.0.0.1:6789

  EPHEMERA_CONFIG_FILE=$EPHEMERA_HOME_DIR/node1/ephemera.toml

  mkdir -p "$REWARD_CONTRACT_DIR"/logs
  mkdir -p "$REWARD_CONTRACT_DIR"/db

  touch "$CONTRACT_DB_PATH"
  touch "$LOGS_FILE"

  echo "Starting reward contract"
  $REWARD_CONTRACT --db-path "$CONTRACT_DB_PATH" \
    --url "$SMART_CONTRACT_URL" \
    --ephemera-config "$EPHEMERA_CONFIG_FILE" \
    >"$LOGS_FILE" 2>&1 &

  echo reward_contract:"$!" >>"$PIDS_FILE"

  echo "Reward contract started"
  echo Log file: "$LOGS_FILE"
}

stop_cluster() {
  if test -f "$PIDS_FILE"; then
    while read p; do
      NODE_PID=$(echo $p | awk -F ':' '{print $2}')
      kill "$NODE_PID" || true
    done <"$PIDS_FILE"
    rm "$PIDS_FILE"
    echo "Stopped ephemera cluster"
  else
    echo "No ephemera cluster running"
  fi
}

stop_node() {
  echo "Stopping node $NODE_NR"
  NODE_PID=$(grep "$NODE_NR:" "$PIDS_FILE" | awk -F ':' '{print $2}')
  echo "Killing $NODE_PID"
  kill "$NODE_PID" &&
  sed -i '' "/$NODE_PID/d" "$PIDS_FILE"
}

clear() {
  if test -f "$PIDS_FILE"; then
    echo "Cluster is running, try stopping it first by executing ./local-cluster stop."
    exit 1
  fi
  echo "Clearing cluster all directories and files except configuration."
  for d in ~/.ephemera/*/; do
    echo "Clearing $d"
    rm -rf "$d"/logs/*
    rm -rf "$d"/db/*
    rm -rf "$d"/logs/*
    rm -rf "$d"/db/*
  done
}

delete() {
  if test -f "$PIDS_FILE"; then
    echo "Cluster is running, try stopping it first by executing ./local-cluster stop."
    exit 1
  fi
  echo "Deleting ephemera cluster configurations located at ~/.ephemera"
  rm -rf ~/.ephemera
}

update_config() {
  build
  echo "Updating configuration files"
  if [[ "$NODE_ID" = "all" ]]; then
    for d in ~/.ephemera/*/ephemera.toml; do
      echo "Updating $d"
      $EPHEMERA update-config --config-path "$d" --property "$PROPERTY_KEY" --value "$PROPERTY_VALUE"
    done
  else
    EPHEMERA_CONFIG_FILE=~/.ephemera/$NODE_ID/ephemera.toml
    echo "Updating $EPHEMERA_CONFIG_FILE"
    $EPHEMERA update-config --config-path "$EPHEMERA_CONFIG_FILE" --property "$PROPERTY_KEY" --value "$PROPERTY_VALUE"
  fi
}

[[ $SUBCMD == "init" ]] && create_cluster
[[ $SUBCMD == "run" ]] && start_cluster
[[ $SUBCMD == "run_node" ]] && run_node
[[ $SUBCMD == "stop" ]] && stop_cluster
[[ $SUBCMD == "stop_node" ]] && stop_node
[[ $SUBCMD == "clear" ]] && clear
[[ $SUBCMD == "delete" ]] && delete
[[ $SUBCMD == "update_config" ]] && update_config
